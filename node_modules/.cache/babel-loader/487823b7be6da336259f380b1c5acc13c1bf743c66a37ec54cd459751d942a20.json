{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\monis\\\\Downloads\\\\erp\\\\erp\\\\src\\\\OrdersCalendarView.js\",\n  _s = $RefreshSig$();\n// // // OrdersCalendarView.js\n\n// // OrdersCalendarView.js\n\n// import React, { useState } from 'react';\n\n// const OrdersCalendarView = () => {\n//   // Define your styles here\n//   const calendarContainerStyles = {\n//     fontFamily: 'Arial, sans-serif',\n//     backgroundColor: '#f5f5f5',\n//     padding: '20px',\n//     borderRadius: '8px',\n//     boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n//     marginBottom: '20px',\n//     maxWidth: '100%', // Utilize full page width\n//   };\n\n//   const calendarStyles = {\n//     display: 'grid',\n//     gridTemplateColumns: 'repeat(7, 1fr)',\n//     gap: '10px',\n//   };\n\n//   const dateCellStyles = {\n//     padding: '10px',\n//     textAlign: 'center',\n//     cursor: 'pointer',\n//     borderRadius: '5px',\n//     transition: 'background-color 0.3s ease',\n//   };\n\n//   const selectedDateOrdersStyles = {\n//     backgroundColor: '#3498db',\n//     color: '#fff',\n//   };\n\n//   // Dummy data for demonstration\n//   const ordersData = [\n//     { id: 1, customerName: 'Customer 1', orderDate: '2022-03-10' },\n//     { id: 2, customerName: 'Customer 2', orderDate: '2022-03-12' },\n//     // Add more orders data\n//   ];\n\n//   const [selectedDate, setSelectedDate] = useState(null);\n\n//   const handleDateClick = (date) => {\n//     setSelectedDate(date);\n//   };\n\n//   return (\n//     <div style={calendarContainerStyles}>\n//       <h1>Orders Calendar View</h1>\n//       <div style={calendarStyles}>\n//         {/* Loop through dates and render date cells */}\n//         {/* For demonstration, let's assume you are working with March 2022 */}\n//         {Array.from({ length: 31 }, (_, index) => {\n//           const currentDate = new Date(2022, 2, index + 1); // Months are zero-based, so 2 represents March\n//           const isDateSelected = selectedDate && currentDate.toISOString().split('T')[0] === selectedDate;\n\n//           return (\n//             <div\n//               key={index}\n//               style={{\n//                 ...dateCellStyles,\n//                 backgroundColor: isDateSelected ? selectedDateOrdersStyles.backgroundColor : dateCellStyles.backgroundColor,\n//                 color: isDateSelected ? selectedDateOrdersStyles.color : dateCellStyles.color,\n//               }}\n//               onClick={() => handleDateClick(currentDate.toISOString().split('T')[0])}\n//             >\n//               {index + 1}\n//             </div>\n//           );\n//         })}\n//       </div>\n//       {/* Display orders for the selected date */}\n//       {selectedDate && (\n//         <div style={selectedDateOrdersStyles}>\n//           <h2>Orders for {selectedDate}</h2>\n//           <ul>\n//             {ordersData\n//               .filter((order) => order.orderDate === selectedDate)\n//               .map((order) => (\n//                 <li key={order.id}>{order.customerName}</li>\n//               ))}\n//           </ul>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// const getStatusColor = (status) => {\n//   switch (status) {\n//     case 'Processing':\n//       return '#3498db'; // Blue\n//     case 'Shipped':\n//       return '#f39c12'; // Orange\n//     case 'Delivered':\n//       return '#2ecc71'; // Green\n//     default:\n//       return '#333'; // Default color\n//   }\n// };\n\n// export default OrdersCalendarView;\n\nimport React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrdersCalendarView = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const handleDateChange = date => {\n    setSelectedDate(date);\n    // Add logic to fetch and display orders for the selected date\n    // You can use state or a context API to manage orders data\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: calendarContainerStyles,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Orders Calendar View\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      onChange: handleDateChange,\n      value: selectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n// Styles for the calendar\n_s(OrdersCalendarView, \"mu4fg2bVP7ctA7Sx6pVThSFlyto=\");\n_c = OrdersCalendarView;\nconst calendarContainerStyles = {\n  maxWidth: '600px',\n  margin: 'auto',\n  padding: '20px'\n};\nexport default OrdersCalendarView;\nvar _c;\n$RefreshReg$(_c, \"OrdersCalendarView\");","map":{"version":3,"names":["React","useState","Calendar","jsxDEV","_jsxDEV","OrdersCalendarView","_s","selectedDate","setSelectedDate","Date","handleDateChange","date","style","calendarContainerStyles","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","value","_c","maxWidth","margin","padding","$RefreshReg$"],"sources":["C:/Users/monis/Downloads/erp/erp/src/OrdersCalendarView.js"],"sourcesContent":["// // // OrdersCalendarView.js\n\n// // OrdersCalendarView.js\n\n// import React, { useState } from 'react';\n\n// const OrdersCalendarView = () => {\n//   // Define your styles here\n//   const calendarContainerStyles = {\n//     fontFamily: 'Arial, sans-serif',\n//     backgroundColor: '#f5f5f5',\n//     padding: '20px',\n//     borderRadius: '8px',\n//     boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n//     marginBottom: '20px',\n//     maxWidth: '100%', // Utilize full page width\n//   };\n\n//   const calendarStyles = {\n//     display: 'grid',\n//     gridTemplateColumns: 'repeat(7, 1fr)',\n//     gap: '10px',\n//   };\n\n//   const dateCellStyles = {\n//     padding: '10px',\n//     textAlign: 'center',\n//     cursor: 'pointer',\n//     borderRadius: '5px',\n//     transition: 'background-color 0.3s ease',\n//   };\n\n//   const selectedDateOrdersStyles = {\n//     backgroundColor: '#3498db',\n//     color: '#fff',\n//   };\n\n//   // Dummy data for demonstration\n//   const ordersData = [\n//     { id: 1, customerName: 'Customer 1', orderDate: '2022-03-10' },\n//     { id: 2, customerName: 'Customer 2', orderDate: '2022-03-12' },\n//     // Add more orders data\n//   ];\n\n//   const [selectedDate, setSelectedDate] = useState(null);\n\n//   const handleDateClick = (date) => {\n//     setSelectedDate(date);\n//   };\n\n//   return (\n//     <div style={calendarContainerStyles}>\n//       <h1>Orders Calendar View</h1>\n//       <div style={calendarStyles}>\n//         {/* Loop through dates and render date cells */}\n//         {/* For demonstration, let's assume you are working with March 2022 */}\n//         {Array.from({ length: 31 }, (_, index) => {\n//           const currentDate = new Date(2022, 2, index + 1); // Months are zero-based, so 2 represents March\n//           const isDateSelected = selectedDate && currentDate.toISOString().split('T')[0] === selectedDate;\n\n//           return (\n//             <div\n//               key={index}\n//               style={{\n//                 ...dateCellStyles,\n//                 backgroundColor: isDateSelected ? selectedDateOrdersStyles.backgroundColor : dateCellStyles.backgroundColor,\n//                 color: isDateSelected ? selectedDateOrdersStyles.color : dateCellStyles.color,\n//               }}\n//               onClick={() => handleDateClick(currentDate.toISOString().split('T')[0])}\n//             >\n//               {index + 1}\n//             </div>\n//           );\n//         })}\n//       </div>\n//       {/* Display orders for the selected date */}\n//       {selectedDate && (\n//         <div style={selectedDateOrdersStyles}>\n//           <h2>Orders for {selectedDate}</h2>\n//           <ul>\n//             {ordersData\n//               .filter((order) => order.orderDate === selectedDate)\n//               .map((order) => (\n//                 <li key={order.id}>{order.customerName}</li>\n//               ))}\n//           </ul>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n\n// const getStatusColor = (status) => {\n//   switch (status) {\n//     case 'Processing':\n//       return '#3498db'; // Blue\n//     case 'Shipped':\n//       return '#f39c12'; // Orange\n//     case 'Delivered':\n//       return '#2ecc71'; // Green\n//     default:\n//       return '#333'; // Default color\n//   }\n// };\n\n// export default OrdersCalendarView;\n\n\n\nimport React, { useState } from 'react';\nimport Calendar from 'react-calendar';\n\nconst OrdersCalendarView = () => {\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n    // Add logic to fetch and display orders for the selected date\n    // You can use state or a context API to manage orders data\n  };\n\n  return (\n    <div style={calendarContainerStyles}>\n      <h2>Orders Calendar View</h2>\n      <Calendar onChange={handleDateChange} value={selectedDate} />\n      {/* Add logic to display orders for the selected date */}\n      {/* You can use a separate component for displaying orders */}\n    </div>\n  );\n};\n\n// Styles for the calendar\nconst calendarContainerStyles = {\n  maxWidth: '600px',\n  margin: 'auto',\n  padding: '20px',\n};\n\nexport default OrdersCalendarView;\n\n\n\n\n\n\n\n"],"mappings":";;AAAA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,IAAIQ,IAAI,CAAC,CAAC,CAAC;EAE5D,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;IACjCH,eAAe,CAACG,IAAI,CAAC;IACrB;IACA;EACF,CAAC;EAED,oBACEP,OAAA;IAAKQ,KAAK,EAAEC,uBAAwB;IAAAC,QAAA,gBAClCV,OAAA;MAAAU,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7Bd,OAAA,CAACF,QAAQ;MAACiB,QAAQ,EAAET,gBAAiB;MAACU,KAAK,EAAEb;IAAa;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAG1D,CAAC;AAEV,CAAC;;AAED;AAAAZ,EAAA,CAnBMD,kBAAkB;AAAAgB,EAAA,GAAlBhB,kBAAkB;AAoBxB,MAAMQ,uBAAuB,GAAG;EAC9BS,QAAQ,EAAE,OAAO;EACjBC,MAAM,EAAE,MAAM;EACdC,OAAO,EAAE;AACX,CAAC;AAED,eAAenB,kBAAkB;AAAC,IAAAgB,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}