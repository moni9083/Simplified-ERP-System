{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\monis\\\\Downloads\\\\erp\\\\erp\\\\src\\\\OrdersCalendarView.js\",\n  _s = $RefreshSig$();\n// // // OrdersCalendarView.js\n\n// // OrdersCalendarView.js\n\nimport React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrdersCalendarView = () => {\n  _s();\n  // Define your styles here\n  const calendarContainerStyles = {\n    fontFamily: 'Arial, sans-serif',\n    backgroundColor: '#f5f5f5',\n    padding: '20px',\n    borderRadius: '8px',\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n    marginBottom: '20px',\n    maxWidth: '100%' // Utilize full page width\n  };\n  const calendarStyles = {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(7, 1fr)',\n    gap: '10px'\n  };\n  const dateCellStyles = {\n    padding: '10px',\n    textAlign: 'center',\n    cursor: 'pointer',\n    borderRadius: '5px',\n    transition: 'background-color 0.3s ease'\n  };\n  const selectedDateOrdersStyles = {\n    backgroundColor: '#3498db',\n    color: '#fff'\n  };\n\n  // Dummy data for demonstration\n  const ordersData = [{\n    id: 1,\n    customerName: 'Customer 1',\n    orderDate: '2022-03-10'\n  }, {\n    id: 2,\n    customerName: 'Customer 2',\n    orderDate: '2022-03-12'\n  }\n  // Add more orders data\n  ];\n  const [selectedDate, setSelectedDate] = useState(null);\n  const handleDateClick = date => {\n    setSelectedDate(date);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: calendarContainerStyles,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Orders Calendar View\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: calendarStyles,\n      children: Array.from({\n        length: 31\n      }, (_, index) => {\n        const currentDate = new Date(2022, 2, index + 1); // Months are zero-based, so 2 represents March\n        const isDateSelected = selectedDate && currentDate.toISOString().split('T')[0] === selectedDate;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            ...dateCellStyles,\n            backgroundColor: isDateSelected ? selectedDateOrdersStyles.backgroundColor : dateCellStyles.backgroundColor,\n            color: isDateSelected ? selectedDateOrdersStyles.color : dateCellStyles.color\n          },\n          onClick: () => handleDateClick(currentDate.toISOString().split('T')[0]),\n          children: index + 1\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), selectedDate && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: selectedDateOrdersStyles,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Orders for \", selectedDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: ordersData.filter(order => order.orderDate === selectedDate).map(order => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: order.customerName\n        }, order.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(OrdersCalendarView, \"rhrbPH1/NtfhiyDl62tZ0yGffOM=\");\n_c = OrdersCalendarView;\nconst getStatusColor = status => {\n  switch (status) {\n    case 'Processing':\n      return '#3498db';\n    // Blue\n    case 'Shipped':\n      return '#f39c12';\n    // Orange\n    case 'Delivered':\n      return '#2ecc71';\n    // Green\n    default:\n      return '#333';\n    // Default color\n  }\n};\nexport default OrdersCalendarView;\n\n// import React, { useState } from 'react';\n// import Calendar from 'react-calendar';\n\n// const OrdersCalendarView = () => {\n//   const [selectedDate, setSelectedDate] = useState(new Date());\n\n//   const handleDateChange = (date) => {\n//     setSelectedDate(date);\n//     // Add logic to fetch and display orders for the selected date\n//     // You can use state or a context API to manage orders data\n//   };\n\n//   return (\n//     <div style={calendarContainerStyles}>\n//       <h2>Orders Calendar View</h2>\n//       <Calendar onChange={handleDateChange} value={selectedDate} />\n//       {/* Add logic to display orders for the selected date */}\n//       {/* You can use a separate component for displaying orders */}\n//     </div>\n//   );\n// };\n\n// // Styles for the calendar\n// const calendarContainerStyles = {\n//   maxWidth: '600px',\n//   margin: 'auto',\n//   padding: '20px',\n// };\n\n// export default OrdersCalendarView;\nvar _c;\n$RefreshReg$(_c, \"OrdersCalendarView\");","map":{"version":3,"names":["React","useState","Calendar","jsxDEV","_jsxDEV","OrdersCalendarView","_s","calendarContainerStyles","fontFamily","backgroundColor","padding","borderRadius","boxShadow","marginBottom","maxWidth","calendarStyles","display","gridTemplateColumns","gap","dateCellStyles","textAlign","cursor","transition","selectedDateOrdersStyles","color","ordersData","id","customerName","orderDate","selectedDate","setSelectedDate","handleDateClick","date","style","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","from","length","_","index","currentDate","Date","isDateSelected","toISOString","split","onClick","filter","order","map","_c","getStatusColor","status","$RefreshReg$"],"sources":["C:/Users/monis/Downloads/erp/erp/src/OrdersCalendarView.js"],"sourcesContent":["// // // OrdersCalendarView.js\n\n// // OrdersCalendarView.js\n\nimport React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nconst OrdersCalendarView = () => {\n  // Define your styles here\n  const calendarContainerStyles = {\n    fontFamily: 'Arial, sans-serif',\n    backgroundColor: '#f5f5f5',\n    padding: '20px',\n    borderRadius: '8px',\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n    marginBottom: '20px',\n    maxWidth: '100%', // Utilize full page width\n  };\n\n  const calendarStyles = {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(7, 1fr)',\n    gap: '10px',\n  };\n\n  const dateCellStyles = {\n    padding: '10px',\n    textAlign: 'center',\n    cursor: 'pointer',\n    borderRadius: '5px',\n    transition: 'background-color 0.3s ease',\n  };\n\n  const selectedDateOrdersStyles = {\n    backgroundColor: '#3498db',\n    color: '#fff',\n  };\n\n  // Dummy data for demonstration\n  const ordersData = [\n    { id: 1, customerName: 'Customer 1', orderDate: '2022-03-10' },\n    { id: 2, customerName: 'Customer 2', orderDate: '2022-03-12' },\n    // Add more orders data\n  ];\n\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  const handleDateClick = (date) => {\n    setSelectedDate(date);\n  };\n\n  return (\n    <div style={calendarContainerStyles}>\n      <h1>Orders Calendar View</h1>\n      <div style={calendarStyles}>\n        {/* Loop through dates and render date cells */}\n        {/* For demonstration, let's assume you are working with March 2022 */}\n        {Array.from({ length: 31 }, (_, index) => {\n          const currentDate = new Date(2022, 2, index + 1); // Months are zero-based, so 2 represents March\n          const isDateSelected = selectedDate && currentDate.toISOString().split('T')[0] === selectedDate;\n\n          return (\n            <div\n              key={index}\n              style={{\n                ...dateCellStyles,\n                backgroundColor: isDateSelected ? selectedDateOrdersStyles.backgroundColor : dateCellStyles.backgroundColor,\n                color: isDateSelected ? selectedDateOrdersStyles.color : dateCellStyles.color,\n              }}\n              onClick={() => handleDateClick(currentDate.toISOString().split('T')[0])}\n            >\n              {index + 1}\n            </div>\n          );\n        })}\n      </div>\n      {/* Display orders for the selected date */}\n      {selectedDate && (\n        <div style={selectedDateOrdersStyles}>\n          <h2>Orders for {selectedDate}</h2>\n          <ul>\n            {ordersData\n              .filter((order) => order.orderDate === selectedDate)\n              .map((order) => (\n                <li key={order.id}>{order.customerName}</li>\n              ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\n\nconst getStatusColor = (status) => {\n  switch (status) {\n    case 'Processing':\n      return '#3498db'; // Blue\n    case 'Shipped':\n      return '#f39c12'; // Orange\n    case 'Delivered':\n      return '#2ecc71'; // Green\n    default:\n      return '#333'; // Default color\n  }\n};\n\nexport default OrdersCalendarView;\n\n\n\n// import React, { useState } from 'react';\n// import Calendar from 'react-calendar';\n\n// const OrdersCalendarView = () => {\n//   const [selectedDate, setSelectedDate] = useState(new Date());\n\n//   const handleDateChange = (date) => {\n//     setSelectedDate(date);\n//     // Add logic to fetch and display orders for the selected date\n//     // You can use state or a context API to manage orders data\n//   };\n\n//   return (\n//     <div style={calendarContainerStyles}>\n//       <h2>Orders Calendar View</h2>\n//       <Calendar onChange={handleDateChange} value={selectedDate} />\n//       {/* Add logic to display orders for the selected date */}\n//       {/* You can use a separate component for displaying orders */}\n//     </div>\n//   );\n// };\n\n// // Styles for the calendar\n// const calendarContainerStyles = {\n//   maxWidth: '600px',\n//   margin: 'auto',\n//   padding: '20px',\n// };\n\n// export default OrdersCalendarView;\n\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}